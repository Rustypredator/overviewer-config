#!/bin/bash

# config
overviewerPath="/usr/local/bin/overviewer.py"
pidfile="/home/minecraft/overviewer.pid"
configfile="/home/minecraft/config/overviewer/main.py"
niceness=19
initScriptPath="/home/minecraft/vanilla/minecraft-init/minecraft"
worldStoragePath="/home/minecraft/vanilla/worldstorage"
worldCachePath="/home/minecraft/cache/overviewer"

# init vars
pid="$$"
poionly=false
force=''
check='--check-tiles'

print_usage_hint() {
    cat <<EOF >&2
Usage: $(basename $0) [-h -p -f]

Description:
    Updates the Minecraft Overviewer map.

Options:
    -h Show this help.
    -p Only updates POIs without rendering tiles.
    -f Force re-rendering of all tiles.
EOF
}

print_status_message() {
    echo -e "$(date +"%Y-%m-%d %H:%M:%S")  ${1}"
}

generate_pois() {
    print_status_message "Generating POIs..."
    nice -n ${niceness} ${overviewerPath} --config="${configfile}" --genpoi
    print_status_message "Done."
}

sync_world_copy() {
    print_status_message "Syncing world copy..."
    if [[ -f ${initScriptPath} ]]; then
        ${initScriptPath} say "§7Synchronisiere Welten für Online-Karte...§r"
        ${initScriptPath} command save-off
        ${initScriptPath} command save-all
        sleep 10s
    fi
    rsync -r ${worldStoragePath} ${worldCachePath}
    if [[ -f ${initScriptPath} ]]; then
        ${initScriptPath} say "§7Synchronisation abgeschlossen.§r"
        ${initScriptPath} command save-on
    fi
    print_status_message "Done."
}

generate_tiles() {
    print_status_message "Updating world map..."
    nice -n ${niceness} ${overviewerPath} --config="${configfile}" ${check} ${force}
    print_status_message "Done."
}

run() {
    while getopts :hpf OPT; do
        case ${OPT} in
            h)
                print_usage_hint
                exit 0
                ;;
            p)
                poionly=true
                ;;
            f)
                check=''
                force='--forcerender'
                ;;
            \?)
                echo -e "Invalid option: -$OPTARG\n" >&2
                print_usage_hint
                exit 1
                ;;
            :)
                echo -e "Option -$OPTARG requires an argument.\n" >&2
                print_usage_hint
                exit 1
                ;;
        esac
    done

    while [[ 1 -lt "$OPTIND" ]]; do
        shift
        OPTIND="`expr \"$OPTIND\" - 1`"
    done

    if [[ -f ${pidfile} ]]; then
        old_pid=$(cat ${pidfile})
        print_status_message "Overviewer is still running" >&2
        print_status_message "PID ${old_pid} exists from previous run" >&2
        print_status_message "Process information:\n$(ps -p ${old_pid} -o lstart,etime)" >&2
        exit 1
    else
        echo ${pid} > ${pidfile}

        generate_pois

        if [[ "${poionly}" = false ]]; then
            sync_world_copy
            generate_tiles
        fi

        rm ${pidfile}
    fi
}

run "$@"



